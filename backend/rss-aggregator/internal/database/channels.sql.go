// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: channels.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createChannel = `-- name: CreateChannel :one

INSERT INTO channels (id, created_at, updated_at, title, description, link, atom_link, feed_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, title, description, link, atom_link, feed_id
`

type CreateChannelParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description sql.NullString
	Link        sql.NullString
	AtomLink    sql.NullString
	FeedID      uuid.UUID
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.AtomLink,
		arg.FeedID,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.AtomLink,
		&i.FeedID,
	)
	return i, err
}

const getChannelByFeedId = `-- name: GetChannelByFeedId :many

SELECT id, created_at, updated_at, title, description, link, atom_link, feed_id FROM channels WHERE feed_id = $1
`

func (q *Queries) GetChannelByFeedId(ctx context.Context, feedID uuid.UUID) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannelByFeedId, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Link,
			&i.AtomLink,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelById = `-- name: GetChannelById :one

SELECT id, created_at, updated_at, title, description, link, atom_link, feed_id FROM channels WHERE id = $1
`

func (q *Queries) GetChannelById(ctx context.Context, id uuid.UUID) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelById, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.AtomLink,
		&i.FeedID,
	)
	return i, err
}

const getChannelByTitle = `-- name: GetChannelByTitle :one
SELECT id, created_at, updated_at, title, description, link, atom_link, feed_id FROM channels WHERE title = $1
`

func (q *Queries) GetChannelByTitle(ctx context.Context, title string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByTitle, title)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.AtomLink,
		&i.FeedID,
	)
	return i, err
}

const getChannels = `-- name: GetChannels :many

SELECT id, created_at, updated_at, title, description, link, atom_link, feed_id FROM channels
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Link,
			&i.AtomLink,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
